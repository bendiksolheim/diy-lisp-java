;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
    (lambda (a b)
        (if a #t (if b #t #f))))

(define and
    (lambda (a b)
        (if a (if b #t #f) #f)))

(define xor
    (lambda (a b)
        (and (or a b)
             (not (and a b)))))

;; Comparison functions
;;
;; > is already defined as part of the language core.

(define >=
    (lambda (a b)
        (or (> a b)
            (eq a b))))

(define <=
    (lambda (a b)
        (not (> a b))))

(define <
    (lambda (x y)
        (not (or (eq x y)
                 (> x y)))))

;; List functions

(define reduce
    (lambda (f z lst)
        (if (empty lst)
            z
            (reduce f (f z (head lst)) (tail lst)))))

(define sum
    (lambda (lst)
        (reduce (lambda (x y) (+ x y)) 0 lst)))

(define length
    (lambda (lst)
        (reduce (lambda (x y) (+ x 1)) 0 lst)))

(define append
    (lambda (lst1 lst2)
        (if (empty lst1)
            lst2
            (cons (head lst1)
                  (append (tail lst1)
                          lst2)))))

(define filter
    (lambda (pred coll)
        (if (empty coll)
            '()
            (if (pred (head coll))
                (cons (head coll) (filter pred (tail coll)))
                (filter pred (tail coll))))))

(define map
    (lambda (f coll)
        (if (empty coll)
            '()
            (cons (f (head coll))
                  (map f (tail coll))))))

(define reverse-aux
    (lambda (lst acc)
        (if (empty lst)
            acc
            (reverse-aux (tail lst) (cons (head lst) acc)))))

(define reverse
    (lambda (lst)
        (reverse-aux lst '())))

(define range
    (lambda (start stop)
        (if (> start stop)
            '()
            (cons start (range (+ 1 start) stop)))))

(define smaller-or-equal
    (lambda (lst pivot)
        (filter (lambda (x) (<= x pivot)) lst)))

(define larger
    (lambda (lst pivot)
        (filter (lambda (x) (> x pivot)) lst)))

(define sort
    (lambda (lst)
        (if (empty lst)
            lst
            (append
                (append (sort (smaller-or-equal (tail lst) (head lst)))
                        (cons (head lst) '()))
                (sort (larger lst (head lst)))))))
